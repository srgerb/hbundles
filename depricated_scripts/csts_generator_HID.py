#!/usr/bin/env python
from os import system,popen
import string
import argparse

def get_HID_resnum(input_file):
    pdb = map(string.split,open(input_file,'r').readlines())
    for line in pdb:
        if (line != None and line[0] == "ATOM"):
            if line[3] == "HID":
                return line[5]
            elif line[0] == "TER" or line[0] == "END":
                print("No HID on first chain")
                return "0"
    print("No HID in pose")
    return "0"

parser = argparse.ArgumentParser(description="Takes in a file generated by Adam's symmetric matcher mover and creates a constraints file for HID")
parser.add_argument('PDB', type=str, nargs=1, help=".pdb file that was generated by symm matcher")
parser.add_argument('-o', type=str, nargs=1, help= "prefix to output file. if this is a file, include the '/' afterwards")
args = parser.parse_args()
input_file = args.PDB[0]

#cleans filename so "folder/input.pdb" will become "input.pdb"
tag= ""
for i in range(0, len(input_file)):# removes .pdb from end of file name
    tag += input_file[i]
    if input_file[i] == "/": #removes path before file name
       tag = ""

if args.o != None:
    output_file_name = args.o[0] + tag + ".cst" #adds the filtered chain name to filename
else:
    output_file_name = tag + ".cst"
#print(tag)

HID_resnum = get_HID_resnum(input_file)
print(HID_resnum)
chains = ['A','B','C','D']
last_chain_number = len(chains)

cstfile = open('%s'%(output_file_name),'w')
for i in range(0, last_chain_number):
    cstfile.write("AtomPair VNI {resnumber}{chain} VNI {resnumber}{next_chain} HARMONIC 0.0 0.3 \n".format(resnumber = HID_resnum, chain = chains[i], next_chain = chains[(i+1)%last_chain_number] ))
#    cstfile.write("AtomPair VX1 {resnumber}{chain} VX1 {resnumber}{next_chain} HARMONIC 0.0 0.3 \n".format(resnumber = HID_resnum, chain = chains[i], next_chain = chains[(i+1)%last_chain_number] ))
    cstfile.write("AtomPair VX2 {resnumber}{chain} VNE {resnumber}{next_chain} HARMONIC 0.0 0.3 \n".format(resnumber = HID_resnum, chain = chains[i], next_chain = chains[(i+1)%last_chain_number] ))
#    cstfile.write("AtomPair VX3 {resnumber}{chain} VNE {resnumber}{next_chain} HARMONIC 0.0 0.3 \n".format(resnumber = HID_resnum, chain = chains[i], next_chain = chains[(i+2)%last_chain_number] ))
    cstfile.write("AtomPair VX4 {resnumber}{chain} VNE {resnumber}{next_chain} HARMONIC 0.0 0.3 \n".format(resnumber = HID_resnum, chain = chains[i], next_chain = chains[(i+3)%last_chain_number] ))
    cstfile.write("\n")

